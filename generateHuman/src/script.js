'use strict';

//import function from uuid library, import is available due using parcel bundler
import { v4 as uuidv4 } from 'uuid';

// 'arrayOfPeople' will be carrying People generated by main function generateHuman
// names and surnames are arrayes for data from API JSONplaceholder

const arrayOfPeople = [];
let names = [];
let surnames = [];
const countries = ["Poland", "England", "Germany", "Finland", "United States", "Canada", "Hungary", "Russia"];

/////////////////////////////////////
//////// MAIN FUNCTION //////////////
/////////////////////////////////////

const generateHuman = function () {

    const human = {

        name: generateName(),
        surname: generateSurname(),
        age: generateRandomNumber(18, 85),
        phoneNumber: generateRandomNumber(100000000, 999999999),
        country: generateCountry(),
        id: uuidv4(),

        email: function () {
            //this method after the first execution will overwrite its field with an automatically generated email address
            this.email = this.name + this.surname + "@test.pl";
        }
    }

    //execute method that generates an email address
    human.email();

    //return generated human
    return human;
}

/////////////////////////////////////
////////// FETCH API ////////////////
/////////////////////////////////////

// Fetch 10 users from API JSONplaceholder 

fetch('https://jsonplaceholder.typicode.com/users')
    .then(res => {
        if (res.ok) {
            return res.json()
        } else {
            return Promise.reject(`Http error: ${res.status}`);
        }
    })
    .then(res => {

        res.forEach((user) => {
            // 'name' gets the 'name' field from the user object using object destructurization
            // 'name_surname' will carrying array with name at index 0 and surname at index 1 of actual user using string method .split()
            // then name and surname will be assigned to separate arrays

            const { name = "name surname" } = user;
            let name_surname = '';

            name_surname = name.split(' ');
            names.push(name_surname[0]);
            surnames.push(name_surname[1]);
        });

        //testing program: generate 10 people and listing them out
        test();

    }).catch(error => {
        console.error(error)
    });


/////////////////////////////////////
////////// FUNCTIONS ////////////////
/////////////////////////////////////

const generateRandomNumber = function (min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

//these functions generate random values ​​from tables with first names, surnames and countries
// functions use the 'generateRandomNumber' function

const generateName = () => { return names[generateRandomNumber(0, (names.length) - 1)] };

const generateSurname = () => { return surnames[generateRandomNumber(0, (names.length) - 1)]; };

const generateCountry = () => { return countries[generateRandomNumber(0, (names.length) - 1)]; };


/////////////////////////////////////
//////////// TESTS //////////////////
/////////////////////////////////////

//testing program: generate 10 people and listing them out
const test = function () {
    for (let i = 0; i < 10; ++i)
        arrayOfPeople.push(generateHuman());

    console.log(arrayOfPeople);
}